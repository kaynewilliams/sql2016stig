---
- name: Combined SQL Server Configuration
  hosts: all
  gather_facts: true
  become: yes
  become_method: runas
  become_user: WinLabAAP #is admin

  vars:
    permission: "VIEW ANY DATABASE"  # Real Permissions
    sql_instance_id: "MSSQL13.SQLEXPRESS" # Specify the SQL Server instance name here

  tasks:

    - name: Install NuGet provider
      win_shell: |
        Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
      become: yes
      become_user: WinLabAAP

    - name: Install pymssql Python module
      win_shell: |
        Install-Module -Name pymssql -Force
      become: yes
      become_user: WinLabAAP
      environment:
        PYTHONIOENCODING: UTF-8

- name: Check and Fix Permissions for NT AUTHORITY\SYSTEM
  hosts: windows_server
  gather_facts: false
  tasks:
    - name: Execute SQL queries to check permissions
      win_shell: |
        $query1 = "SELECT SERVERPROPERTY('IsClustered') AS [IsClustered], SERVERPROPERTY('IsHadrEnabled') AS [IsHadrEnabled]"
        $query2 = "EXECUTE AS LOGIN = 'NT AUTHORITY\SYSTEM'; SELECT * FROM fn_my_permissions(NULL, 'server'); REVERT"

        $result1 = Invoke-Sqlcmd -ServerInstance "MSSQL13.SQLEXPRESS" -Database "master" -Query $query1
        $result2 = Invoke-Sqlcmd -ServerInstance "MSSQL13.SQLEXPRESS" -Database "master" -Query $query2

        Write-Output $result1
        Write-Output $result2
      become: true
      register: sql_query_result
      ignore_errors: true

    - name: Evaluate SQL query results and fix permissions if needed
      win_shell: |
        $isClustered = $using:sql_query_result.stdout_lines[0].IsClustered
        $isHadrEnabled = $using:sql_query_result.stdout_lines[0].IsHadrEnabled
        $permissions = $using:sql_query_result.stdout_lines[1..$using:sql_query_result.stdout_lines.length]

        if ($isClustered -eq 1 -and $isHadrEnabled -eq 0) {
          if ($permissions -contains "CONNECT SQL" -and $permissions -contains "VIEW SERVER STATE" -and $permissions -contains "VIEW ANY DATABASE") {
            Write-Output "No action required. Permissions are within allowed limits."
          } else {
            Write-Output "Fixing permissions for NT AUTHORITY\SYSTEM."
            # Remove unwanted permissions
            # Use the appropriate permission that needs to be revoked
            Invoke-Sqlcmd -ServerInstance "MSSQL13.SQLEXPRESS" -Database "master" -Query "USE Master; REVOKE SHUTDOWN TO [NT AUTHORITY\SYSTEM];"
          }
        }

        if ($isHadrEnabled -eq 1) {
          if ($permissions -contains "CONNECT SQL" -and $permissions -contains "CREATE AVAILABILITY GROUP" -and $permissions -contains "ALTER ANY AVAILABILITY GROUP" -and $permissions -contains "VIEW SERVER STATE" -and $permissions -contains "VIEW ANY DATABASE") {
            Write-Output "No action required. Permissions are within allowed limits."
          } else {
            Write-Output "Fixing permissions for NT AUTHORITY\SYSTEM."
            # Remove unwanted permissions
            # Use the appropriate permission that needs to be revoked
            Invoke-Sqlcmd -ServerInstance "MSSQL13.SQLEXPRESS" -Database "master" -Query "USE Master; REVOKE SHUTDOWN TO [NT AUTHORITY\SYSTEM];"
          }
        }

        if ($isClustered -eq 0 -and $isHadrEnabled -eq 0) {
          if ($permissions -contains "CONNECT SQL" -and $permissions -contains "VIEW ANY DATABASE") {
            Write-Output "No action required. Permissions are within allowed limits."
          } else {
            Write-Output "Fixing permissions for NT AUTHORITY\SYSTEM."
            # Remove unwanted permissions
            # Use the appropriate permission that needs to be revoked
            Invoke-Sqlcmd -ServerInstance "MSSQL13.SQLEXPRESS" -Database "master" -Query "USE Master; REVOKE SHUTDOWN TO [NT AUTHORITY\SYSTEM];"
          }
        }
      become: true
      ignore_errors: true

    - name: Check CEIP Participation
      win_shell: |
        $CEIPPath = "HKLM:\Software\Microsoft\Microsoft SQL Server\{{ sql_instance_id }}\CPE"
        Get-ItemProperty -Path $CEIPPath -Name "CustomerFeedback" | Select-Object -ExpandProperty "CustomerFeedback"
      register: customer_feedback
      ignore_errors: true

    - name: Check Enable Error Reporting
      win_shell: |
        $CPEPath = "HKLM:\Software\Microsoft\Microsoft SQL Server\{{ sql_instance_id }}\CPE"
        Get-ItemProperty -Path $CPEPath -Name "EnableErrorReporting" | Select-Object -ExpandProperty "EnableErrorReporting"
      register: enable_error_reporting
      ignore_errors: true

    - name: Check CEIP Participation (Version 130)
      win_shell: |
        $CEIPPath_130 = "HKLM:\Software\Microsoft\Microsoft SQL Server\130"
        Get-ItemProperty -Path $CEIPPath_130 -Name "CustomerFeedback" | Select-Object -ExpandProperty "CustomerFeedback"
      register: customer_feedback_130
      ignore_errors: true

    - name: Check Enable Error Reporting (Version 130)
      win_shell: |
        $CPEPath_130 = "HKLM:\Software\Microsoft\Microsoft SQL Server\130"
        Get-ItemProperty -Path $CPEPath_130 -Name "EnableErrorReporting" | Select-Object -ExpandProperty "EnableErrorReporting"
      register: enable_error_reporting_130
      ignore_errors: true

    - name: Ensure CEIP is Disabled
      win_shell: |
        $CEIPPath = "HKLM:\Software\Microsoft\Microsoft SQL Server\{{ sql_instance_id }}\CPE"
        Set-ItemProperty -Path $CEIPPath -Name "CustomerFeedback" -Value 0
      when: customer_feedback.stdout == "1"
      ignore_errors: true

    - name: Ensure Error Reporting is Disabled
      win_shell: |
        $CPEPath = "HKLM:\Software\Microsoft\Microsoft SQL Server\{{ sql_instance_id }}\CPE"
        Set-ItemProperty -Path $CPEPath -Name "EnableErrorReporting" -Value 0
      when: enable_error_reporting.stdout == "1"
      ignore_errors: true

    - name: Ensure CEIP is Disabled (Version 130)
      win_shell: |
        $CEIPPath_130 = "HKLM:\Software\Microsoft\Microsoft SQL Server\130"
        Set-ItemProperty -Path $CEIPPath_130 -Name "CustomerFeedback" -Value 0
      when: customer_feedback_130.stdout == "1"
      ignore_errors: true

    - name: Ensure Error Reporting is Disabled (Version 130)
      win_shell: |
        $CPEPath_130 = "HKLM:\Software\Microsoft\Microsoft SQL Server\130"
        Set-ItemProperty -Path $CPEPath_130 -Name "EnableErrorReporting" -Value 0
      when: enable_error_reporting_130.stdout == "1"
      ignore_errors: true
